<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.5"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:ard="clr-namespace:Bonsai.Arduino;assembly=Bonsai.Arduino"
                 xmlns:spk="clr-namespace:Bonsai.Spinnaker;assembly=Bonsai.Spinnaker"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:eph="clr-namespace:Bonsai.Ephys;assembly=Bonsai.Ephys"
                 xmlns:dsp="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="GroupWorkflow">
        <Name>Session Information</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="Arena Rows" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>2</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>Arena Rows</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="Arena Columns" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>Arena Cols</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="Minimum ITI" Description="Minimum ITI in seconds" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>1</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>ITI Min</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="Maximum ITI" Description="Maximum ITI in seconds" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>3</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>ITI Max</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Subject Information</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>date</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>_</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>MouseID</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>_</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>session</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Add" />
            <Expression xsi:type="rx:ReplaySubject">
              <Name>File naming info</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName=".CSV" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>.csv</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>CSV file</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="Date" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>20240808</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>date</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName=".avi" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>.avi</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>AVI File</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="data_directory" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>T:/clickbait/ephys_recordings/</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>ExpName</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>MouseID</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>session</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Add" />
            <Expression xsi:type="rx:ReplaySubject">
              <Name>Path</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Video_Path</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>File naming info</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>_camera</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Add" />
            <Expression xsi:type="Format" />
            <Expression xsi:type="rx:ReplaySubject">
              <Name>CAMERA</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Path</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>File naming info</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>_Ephys</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="Add" />
            <Expression xsi:type="Format" />
            <Expression xsi:type="rx:ReplaySubject">
              <Name>Ephys</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>date</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>File naming info</Name>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="MouseID" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>1000</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>MouseID</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="implant type" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>none</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>ExpName</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName=".bin" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>.bin</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>bin</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="session" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>Shaping 3</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>session</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="video_directory" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>T:/clickbait/raw_videos/</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>Video_Path</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="5" Label="Source1" />
            <Edge From="1" To="5" Label="Source2" />
            <Edge From="2" To="5" Label="Source3" />
            <Edge From="3" To="5" Label="Source4" />
            <Edge From="4" To="5" Label="Source5" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="14" To="15" Label="Source1" />
            <Edge From="15" To="16" Label="Source1" />
            <Edge From="17" To="18" Label="Source1" />
            <Edge From="18" To="26" Label="Source1" />
            <Edge From="19" To="26" Label="Source2" />
            <Edge From="20" To="26" Label="Source3" />
            <Edge From="21" To="26" Label="Source4" />
            <Edge From="22" To="26" Label="Source5" />
            <Edge From="23" To="26" Label="Source6" />
            <Edge From="24" To="26" Label="Source7" />
            <Edge From="25" To="26" Label="Source8" />
            <Edge From="26" To="27" Label="Source1" />
            <Edge From="27" To="28" Label="Source1" />
            <Edge From="29" To="32" Label="Source1" />
            <Edge From="30" To="32" Label="Source2" />
            <Edge From="31" To="32" Label="Source3" />
            <Edge From="32" To="33" Label="Source1" />
            <Edge From="33" To="34" Label="Source1" />
            <Edge From="34" To="35" Label="Source1" />
            <Edge From="36" To="39" Label="Source1" />
            <Edge From="37" To="39" Label="Source2" />
            <Edge From="38" To="39" Label="Source3" />
            <Edge From="39" To="40" Label="Source1" />
            <Edge From="40" To="41" Label="Source1" />
            <Edge From="41" To="42" Label="Source1" />
            <Edge From="45" To="46" Label="Source1" />
            <Edge From="46" To="47" Label="Source1" />
            <Edge From="48" To="49" Label="Source1" />
            <Edge From="49" To="50" Label="Source1" />
            <Edge From="51" To="52" Label="Source1" />
            <Edge From="52" To="53" Label="Source1" />
            <Edge From="54" To="55" Label="Source1" />
            <Edge From="55" To="56" Label="Source1" />
            <Edge From="57" To="58" Label="Source1" />
            <Edge From="58" To="59" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ard:CreateArduino">
          <ard:Name>Arduino Mega 2560</ard:Name>
          <ard:PortName>COM3</ard:PortName>
          <ard:BaudRate>57600</ard:BaudRate>
          <ard:SamplingInterval>10</ard:SamplingInterval>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="spk:SpinnakerCapture">
          <spk:Index xsi:nil="true" />
          <spk:ColorProcessing>Default</spk:ColorProcessing>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Image</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Crop">
          <cv:RegionOfInterest>
            <cv:X>30</cv:X>
            <cv:Y>355</cv:Y>
            <cv:Width>1345</cv:Width>
            <cv:Height>530</cv:Height>
          </cv:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>CAMERA</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>AVI File</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Add" />
      <Expression xsi:type="Format" />
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="io:GetFullPath" />
      </Expression>
      <Expression xsi:type="PropertyMapping">
        <PropertyMappings>
          <Property Name="FileName" />
        </PropertyMappings>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:VideoWriter">
          <cv:FileName>T:\clickbait\raw_videos\20240808_1000_Shaping 3_camera.avi</cv:FileName>
          <cv:Suffix>None</cv:Suffix>
          <cv:Buffered>true</cv:Buffered>
          <cv:Overwrite>true</cv:Overwrite>
          <cv:FourCC>FMP4</cv:FourCC>
          <cv:FrameRate>99.97</cv:FrameRate>
          <cv:FrameSize>
            <cv:Width>0</cv:Width>
            <cv:Height>0</cv:Height>
          </cv:FrameSize>
          <cv:ResizeInterpolation>NearestNeighbor</cv:ResizeInterpolation>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Smooth">
          <cv:SmoothType>Gaussian</cv:SmoothType>
          <cv:Size1>27</cv:Size1>
          <cv:Size2>27</cv:Size2>
          <cv:Sigma1>20</cv:Sigma1>
          <cv:Sigma2>20</cv:Sigma2>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Threshold">
          <cv:ThresholdValue>32</cv:ThresholdValue>
          <cv:MaxValue>255</cv:MaxValue>
          <cv:ThresholdType>Binary</cv:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Invert Image</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *

@returns(IplImage)
def process(value):

  image = 255-value
  return image</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:FindContours">
          <cv:Mode>External</cv:Mode>
          <cv:Method>ChainApproxSimple</cv:Method>
          <cv:Offset>
            <cv:X>0</cv:X>
            <cv:Y>0</cv:Y>
          </cv:Offset>
          <cv:MinArea>12</cv:MinArea>
          <cv:MaxArea xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:Centroid" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>X</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Y</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="cv:ConvertColor">
          <cv:Conversion>Gray2Bgr</cv:Conversion>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ard:AnalogInput">
          <ard:PortName>Arduino Mega 2560</ard:PortName>
          <ard:Pin>0</ard:Pin>
        </Combinator>
      </Expression>
      <Expression xsi:type="LessThan">
        <Operand xsi:type="IntProperty">
          <Value>10</Value>
        </Operand>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Sample" />
      </Expression>
      <Expression xsi:type="rx:AsyncSubject">
        <Name>Poke Left</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ard:AnalogInput">
          <ard:PortName>Arduino Mega 2560</ard:PortName>
          <ard:Pin>8</ard:Pin>
        </Combinator>
      </Expression>
      <Expression xsi:type="LessThan">
        <Operand xsi:type="IntProperty">
          <Value>10</Value>
        </Operand>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Sample" />
      </Expression>
      <Expression xsi:type="rx:AsyncSubject">
        <Name>Poke Right</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Arena Rows</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Arena Cols</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>ITI Min</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>ITI Max</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:WithLatestFrom" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:CombineLatest" />
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Clickbait Task</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
clr.AddReference("System")
from OpenCV.Net import *
import math
import time
import random

# Class to generate maze coordinates
class GridMaze:
    def __init__(self, maze_bounds, maze_dims):
        self.bounds = maze_bounds
        self.shape = maze_dims
        
        cellsize_x = maze_bounds[0] // maze_dims[0]
        cellsize_y = maze_bounds[1] // maze_dims[1]
        
        # Generate Grid
        self.cells = [
            (Point(x * cellsize_x, y * cellsize_y), 
             Point((x + 1) * cellsize_x, (y + 1) * cellsize_y))
            for y in range(self.shape[1])
            for x in range(self.shape[0])
        ]

def draw_grid(grid, img):
    for cell in grid.cells:
        CV.Rectangle(img, cell[0], cell[1], grid_color, thickness=2)

# Function to extract dims from image
def get_image_shape(img):
    size = img.Size
    return [size.Width, size.Height]

# Modified get_grid_location to handle potential float inputs
def get_grid_location(grid, centroid_x, centroid_y, tgt_list, img):
    cell_width = grid.bounds[0] // grid.shape[0]
    cell_height = grid.bounds[1] // grid.shape[1]
    
    grid_x = int(centroid_x // cell_width)
    grid_y = int(centroid_y // cell_height)
    
    # Get current cell and draw it
    if 0 &lt;= grid_x &lt; grid.shape[0] and 0 &lt;= grid_y &lt; grid.shape[1]:
        cell = grid.cells[grid_y * grid.shape[0] + grid_x]
        CV.Rectangle(img, cell[0], cell[1], mouse_loc_color, thickness=-1)
    
    # Check if current cell is in target list. If so, remove from target list
    tgt_list = [tgt for tgt in tgt_list if tgt != grid_y * grid.shape[0] + grid_x]
    
    return grid_x, grid_y, tgt_list

def create_blank_canvas(width, height, channels=3, color=(0, 0, 0)):
    depth = IplDepth.U8
    img = IplImage(Size(width, height), depth, channels)
    if channels == 1:
        fill_color = Scalar.All(color[0])
    else:
        fill_color = Scalar.Rgb(color[0], color[1], color[2])
    img.Set(fill_color)
    
    return img

"""
Define targets
"""

def generate_targets(grid_cells_x, grid_cells_y, num_tgt):

  possible_targets = grid_cells_x * grid_cells_y
  tgt_list = []

  for ii in range(num_targets):
    tgt_cell = random.randint(0, possible_targets-1)
    tgt_list.append(tgt_cell)
  
  return grid_cells_x, grid_cells_y, tgt_list

def draw_targets(tgt_list, grid, img):
  for target in tgt_list:
    CV.Rectangle(img, grid.cells[target][0], grid.cells[target][1], target_color, thickness=-1)


"""
Global variables
"""
# Initialize trial variables
global grid_x
global grid_y
global grid_cells_x
global grid_cells_y
global target_list
global num_targets
global reward_state
global click
global click_start_time
global drinking
global reward_left
global reward_right
global reward_left_start_time
global reward_right_start_time
global reward_left_count
global reward_right_count
global trial_count

grid_x = 1
grid_y = 1
grid_cells_x = None
grid_cells_y = None
target_list = None
num_targets = 1
reward_state = False
click = False
click_start_time = 0
drinking = False
reward_left = False
reward_right = False
reward_left_start_time = 0
reward_right_start_time = 0
reward_left_count = 0
reward_right_count = 0
trial_count = 0

# ITI and poke timing variables
global iti_start_time
global iti_duration
global in_iti
global withdrawal_start_time
global in_withdrawal_period
global prev_poke_left
global prev_poke_right

iti_start_time = 0
iti_duration = 0
in_iti = False
withdrawal_start_time = 0
in_withdrawal_period = False
prev_poke_left = False
prev_poke_right = False

"""
# Visualization parameters
"""
centroid_color = Scalar.Rgb(255, 255, 255)
mouse_loc_color = Scalar.Rgb(255, 0, 0)
target_color = Scalar.Rgb(64, 64, 64)
grid_color = Scalar.Rgb(128, 128, 128)
centroid_radius = 5

"""
Execute task
"""

# Generate initial grid and targets
if target_list is None:
  grid_cells_x, grid_cells_y, target_list = generate_targets(grid_x, grid_y, num_targets)

@returns(tuple)
def process(value):
    # Declare global vars
    global grid_x
    global grid_y
    global grid_cells_x
    global grid_cells_y
    global target_list
    global reward_state
    global click
    global click_start_time
    global drinking
    global reward_left
    global reward_right
    global reward_left_start_time
    global reward_right_start_time
    global iti_start_time
    global iti_duration
    global in_iti
    global withdrawal_start_time
    global in_withdrawal_period
    global prev_poke_left
    global prev_poke_right
    global reward_left_count
    global reward_right_count
    global trial_count

    # Number of grid cells to divide the arena by (defined by 'Experiment Information' GroupWorkFlow)
    grid_y = value[1][0]
    grid_x = value[1][1]

    # Number of cells to to tag as search targets
    num_targets = 1

    # Timing-related vars
    current_time = time.time()
    reward_duration_left = 0.046  # 0.046 seconds
    reward_duration_right = 0.05
    click_duration = 0.1
    iti_duration_min = value[1][2]
    iti_duration_max = value[1][3]
    withdrawal_duration = 0.5



    # Load realtime variables from Zip node
    centroid_x, centroid_y, image = value[0][0], value[0][1], value[0][2]
    poke_left, poke_right = bool(value[0][3]), bool(value[0][4])

    # Process grid and canvas
    grid_loc_x, grid_loc_y = None, None
    img_dims = get_image_shape(image)
    grid = GridMaze(img_dims, [grid_cells_x, grid_cells_y])
    canvas = create_blank_canvas(img_dims[0], img_dims[1])
    draw_grid(grid, canvas)
    draw_targets(target_list, grid, canvas)

    if not (math.isnan(centroid_x) or math.isnan(centroid_y)):
        grid_loc_x, grid_loc_y, target_list = get_grid_location(grid, centroid_x, centroid_y, target_list, canvas)
        CV.Circle(canvas, Point(int(centroid_x), int(centroid_y)), centroid_radius, centroid_color, -1)

    # State machine logic
    if in_iti:
        if current_time - iti_start_time &gt;= iti_duration:
            trial_count += 1
            in_iti = False
            target_list = generate_targets(grid_x, grid_y, num_targets)[2]
    elif in_withdrawal_period:
        if not (poke_left or poke_right):  # Mouse has withdrawn
            if current_time - withdrawal_start_time &gt;= withdrawal_duration:
                in_withdrawal_period = False
                in_iti = True
                iti_start_time = current_time
                iti_duration = random.uniform(iti_duration_min, iti_duration_max)
        else:  # Mouse is still poking, reset withdrawal timer
            withdrawal_start_time = current_time
    elif reward_state:
        if reward_left and current_time - reward_left_start_time &gt;= reward_duration_left:
            reward_left = False
            in_withdrawal_period = True
            withdrawal_start_time = current_time
            reward_state = False
        elif reward_right and current_time - reward_right_start_time &gt;= reward_duration_right:
            reward_right = False
            in_withdrawal_period = True
            withdrawal_start_time = current_time
            reward_state = False
        elif poke_left and not reward_left and not reward_right:
            reward_left = True
            reward_left_count += 1
            reward_left_start_time = current_time
        elif poke_right and not reward_right and not reward_left:
            reward_right = True
            reward_right_count += 1
            reward_right_start_time = current_time
    else:
        if len(target_list) == 0:
            reward_state = True
            click = True
            click_start_time = current_time

    # Handle click duration
    if click and current_time - click_start_time &gt;= click_duration:
        click = False

    # Update previous poke states and set drinking state
    prev_poke_left, prev_poke_right = poke_left, poke_right
    drinking = poke_left or poke_right

    return (canvas, (grid_loc_x, grid_loc_y), reward_state, reward_left, reward_right, drinking, in_iti, click, trial_count, reward_left_count, reward_right_count)</ipy:Script>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Grid Visualization</ipy:Name>
        <ipy:Script>import clr
clr.AddReference("OpenCV.Net")
clr.AddReference("System")
from OpenCV.Net import *

@returns(IplImage)
def process(value):
  return value[0]

</ipy:Script>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Grid Location</ipy:Name>
        <ipy:Script>@returns(tuple)
def process(value):
  return value[1]</ipy:Script>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Water Left</ipy:Name>
        <ipy:Script># Get reward_left state

@returns(bool)
def process(value):
  return value[3]</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ard:DigitalOutput">
          <ard:PortName>Arduino Mega 2560</ard:PortName>
          <ard:Pin>7</ard:Pin>
        </Combinator>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Water Right</ipy:Name>
        <ipy:Script># Get reward_right state and reward state

@returns(bool)
def process(value):
  return value[4]</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ard:DigitalOutput">
          <ard:PortName>Arduino Mega 2560</ard:PortName>
          <ard:Pin>8</ard:Pin>
        </Combinator>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Click</ipy:Name>
        <ipy:Script># Get click state (click is always last item in return statement)

@returns(bool)
def process(value):
  return value[-4]</ipy:Script>
      </Expression>
      <Expression xsi:type="Disable">
        <Builder xsi:type="Combinator">
          <Combinator xsi:type="ard:DigitalOutput">
            <ard:PortName>Arduino Mega 2560</ard:PortName>
            <ard:Pin>12</ard:Pin>
          </Combinator>
        </Builder>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Reward State</ipy:Name>
        <ipy:Script># Get reward state

@returns(bool)
def process(value):
  return value[2]</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ard:DigitalOutput">
          <ard:PortName>Arduino Mega 2560</ard:PortName>
          <ard:Pin>5</ard:Pin>
        </Combinator>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>ITI</ipy:Name>
        <ipy:Script># Get click state (iti is always second to last item in return statement)

@returns(bool)
def process(value):
  return value[-5]</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ard:DigitalOutput">
          <ard:PortName>Arduino Mega 2560</ard:PortName>
          <ard:Pin>6</ard:Pin>
        </Combinator>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Reward Left Count</ipy:Name>
        <ipy:Script># Get reward left count

@returns(int)
def process(value):
  return value[-2]</ipy:Script>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Trial Count</ipy:Name>
        <ipy:Script># Get reward left count

@returns(int)
def process(value):
  return value[-3]</ipy:Script>
      </Expression>
      <Expression xsi:type="ipy:PythonTransform">
        <ipy:Name>Reward Right Count</ipy:Name>
        <ipy:Script># Get reward left count

@returns(int)
def process(value):
  return value[-1]</ipy:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="eph:Rhd2000EvalBoard">
          <eph:BitFileName>C:\Program Files\Open Ephys\shared\rhd2000.bit</eph:BitFileName>
          <eph:SampleRate>SampleRate30000Hz</eph:SampleRate>
          <eph:ExternalFastSettleEnabled>false</eph:ExternalFastSettleEnabled>
          <eph:LowerBandwidth>0.01</eph:LowerBandwidth>
          <eph:UpperBandwidth>7500</eph:UpperBandwidth>
          <eph:DspCutoffFrequency>1</eph:DspCutoffFrequency>
          <eph:DspEnabled>true</eph:DspEnabled>
          <eph:CableDelayA>4</eph:CableDelayA>
          <eph:CableDelayB xsi:nil="true" />
          <eph:CableDelayC xsi:nil="true" />
          <eph:CableDelayD xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>AmplifierData</Selector>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Ephys</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>bin</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="rx:Zip" />
      </Expression>
      <Expression xsi:type="Add" />
      <Expression xsi:type="Format" />
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="io:GetFullPath" />
      </Expression>
      <Expression xsi:type="PropertyMapping">
        <PropertyMappings>
          <Property Name="Path" />
        </PropertyMappings>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="dsp:MatrixWriter">
          <dsp:Path>T:\clickbait\ephys_recordings\none\1000\Shaping 3\20240808_1000_Shaping 3_Ephys.bin</dsp:Path>
          <dsp:Suffix>None</dsp:Suffix>
          <dsp:Overwrite>true</dsp:Overwrite>
          <dsp:Layout>ColumnMajor</dsp:Layout>
        </Combinator>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="6" To="14" Label="Source1" />
      <Edge From="6" To="15" Label="Source1" />
      <Edge From="6" To="24" Label="Source1" />
      <Edge From="7" To="9" Label="Source1" />
      <Edge From="8" To="9" Label="Source2" />
      <Edge From="9" To="10" Label="Source1" />
      <Edge From="10" To="11" Label="Source1" />
      <Edge From="11" To="12" Label="Source1" />
      <Edge From="12" To="13" Label="Source1" />
      <Edge From="13" To="14" Label="Source2" />
      <Edge From="15" To="16" Label="Source1" />
      <Edge From="16" To="17" Label="Source1" />
      <Edge From="17" To="18" Label="Source1" />
      <Edge From="18" To="19" Label="Source1" />
      <Edge From="19" To="20" Label="Source1" />
      <Edge From="20" To="21" Label="Source1" />
      <Edge From="21" To="22" Label="Source1" />
      <Edge From="21" To="23" Label="Source1" />
      <Edge From="22" To="27" Label="Source2" />
      <Edge From="22" To="33" Label="Source1" />
      <Edge From="23" To="31" Label="Source2" />
      <Edge From="23" To="33" Label="Source2" />
      <Edge From="24" To="33" Label="Source3" />
      <Edge From="25" To="26" Label="Source1" />
      <Edge From="26" To="27" Label="Source1" />
      <Edge From="27" To="28" Label="Source1" />
      <Edge From="28" To="33" Label="Source4" />
      <Edge From="29" To="30" Label="Source1" />
      <Edge From="30" To="31" Label="Source1" />
      <Edge From="31" To="32" Label="Source1" />
      <Edge From="32" To="33" Label="Source5" />
      <Edge From="33" To="40" Label="Source1" />
      <Edge From="34" To="38" Label="Source1" />
      <Edge From="35" To="38" Label="Source2" />
      <Edge From="36" To="38" Label="Source3" />
      <Edge From="37" To="38" Label="Source4" />
      <Edge From="38" To="39" Label="Source1" />
      <Edge From="39" To="40" Label="Source2" />
      <Edge From="40" To="41" Label="Source1" />
      <Edge From="41" To="42" Label="Source1" />
      <Edge From="41" To="43" Label="Source1" />
      <Edge From="41" To="44" Label="Source1" />
      <Edge From="41" To="46" Label="Source1" />
      <Edge From="41" To="48" Label="Source1" />
      <Edge From="41" To="50" Label="Source1" />
      <Edge From="41" To="52" Label="Source1" />
      <Edge From="41" To="54" Label="Source1" />
      <Edge From="41" To="55" Label="Source1" />
      <Edge From="41" To="56" Label="Source1" />
      <Edge From="44" To="45" Label="Source1" />
      <Edge From="46" To="47" Label="Source1" />
      <Edge From="48" To="49" Label="Source1" />
      <Edge From="50" To="51" Label="Source1" />
      <Edge From="52" To="53" Label="Source1" />
      <Edge From="57" To="58" Label="Source1" />
      <Edge From="58" To="66" Label="Source1" />
      <Edge From="59" To="61" Label="Source1" />
      <Edge From="60" To="61" Label="Source2" />
      <Edge From="61" To="62" Label="Source1" />
      <Edge From="62" To="63" Label="Source1" />
      <Edge From="63" To="64" Label="Source1" />
      <Edge From="64" To="65" Label="Source1" />
      <Edge From="65" To="66" Label="Source2" />
    </Edges>
  </Workflow>
</WorkflowBuilder>